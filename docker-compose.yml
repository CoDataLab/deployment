# File: docker-compose.yml

services:
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl:ro  # Ensure nginx can read the certs
      - frontend-build:/var/www/react-build
    depends_on:
      - frontend
      - backend
      - storage # Nginx should depend on storage too
    networks:
      - app_network
    restart: always

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    expose:
      - "8082"
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://badis:12332Mps100Pk3dzfde07@mongo1:27017,mongo2:27017,mongo3:27017/mydb?authSource=mydb&replicaSet=rs0
      - JWT_SECRET=${JWT_SECRET}
      - COOKIE_NAME=${COOKIE_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - redis
    networks:
      - app_network
    restart: always

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - frontend-build:/usr/share/nginx/html
    networks:
      - app_network

  # +++ ADDED SECTION START +++
  storage:
    build:
      context: ./storage
      dockerfile: Dockerfile
    restart: always
    environment:
      # This URL uses service names, which Docker Compose resolves to internal IPs
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      - postgres
    networks:
      - app_network

  postgres:
    image: postgres:15-alpine
    hostname: postgres
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app_network

  redis:
    image: redis:7-alpine
    hostname: redis
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - app_network
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}

  # Primary MongoDB instance
  mongo1:
    image: mongo:6.0
    hostname: mongo1
    container_name: mongo1
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo1-data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./mongo-keyfile:/opt/keyfile/mongo-keyfile:ro
    networks:
      - app_network
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    command: ["--replSet", "rs0", "--bind_ip_all", "--keyFile", "/opt/keyfile/mongo-keyfile"]

  # Secondary MongoDB instance 1
  mongo2:
    image: mongo:6.0
    hostname: mongo2
    container_name: mongo2
    restart: always
    ports:
      - "27018:27017"
    volumes:
      - mongo2-data:/data/db
      - ./mongo-keyfile:/opt/keyfile/mongo-keyfile:ro
    networks:
      - app_network
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    command: ["--replSet", "rs0", "--bind_ip_all", "--keyFile", "/opt/keyfile/mongo-keyfile"]
    depends_on:
      - mongo1

  # Secondary MongoDB instance 2
  mongo3:
    image: mongo:6.0
    hostname: mongo3
    container_name: mongo3
    restart: always
    ports:
      - "27019:27017"
    volumes:
      - mongo3-data:/data/db
      - ./mongo-keyfile:/opt/keyfile/mongo-keyfile:ro
    networks:
      - app_network
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    command: ["--replSet", "rs0", "--bind_ip_all", "--keyFile", "/opt/keyfile/mongo-keyfile"]
    depends_on:
      - mongo1

  # MongoDB replica set initialization
  mongo-setup:
    image: mongo:6.0
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    volumes:
      - ./replica-setup.js:/scripts/replica-setup.js:ro
    networks:
      - app_network
    entrypoint: ["bash", "-c", "sleep 10 && mongosh --host mongo1:27017 --authenticationDatabase admin -u ${MONGO_ROOT_USER} -p ${MONGO_ROOT_PASSWORD} --file /scripts/replica-setup.js && exit 0"]
    restart: "no"

networks:
  app_network:
    driver: bridge

volumes:
  mongo1-data:
  mongo2-data:
  mongo3-data:
  redis-data:
  frontend-build:
  postgres-data: # <-- ADDED THIS